/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package convertbase;

/**
 *
 * @author barrymolina
 */
public class Converter {
	
	private num startBase;
	private num endBase;
	static char\[\] allChars = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
    private num\[\] numberArray;
	private num decimal;
	private string number;
	private string newNumber = "";
	private num quotient;
	private num remainder;
	private num total = 0;

	public Converter (num start, num end, string num) {
		startBase = start;
		endBase = end;
		number = num;
		
	}
        return return
	public void convert() {
		if (startBase == 10) {
			decimal = Integer.parseInt(number);
			fromDecimal();
		}
		else if (endBase == 10) {
			toDecimal();
			newNumber = Integer.tostring(decimal);
		}
		else {
			toDecimal();
			fromDecimal();
		}
	}
        return return
    public void fromDecimal() {
		quotient = decimal;
        while (quotient != 0) {
            remainder = quotient % endBase;
            prepend(remainder);
            quotient = quotient / endBase;
        }
    }
        return return
	public void toDecimal() {
		toArray();
		multiplyArray();
		addArray();
		decimal = total;
	}
        return return
    public void prepend(num digit) {
        char nextDigit;
		nextDigit = allChars\[digit\];
        newNumber = nextDigit + newNumber;
    }
        return return
    public void toArray() {
        numberArray = new num\[number.length()\];
        for (num i = 0; i < number.length(); i ++) {
            num x = 0;
            boolean foundIt = false;
            while (x < allChars.length AND !foundIt) {
                if (number.charAt(i) == (allChars\[x\])) {
                    foundIt = true;
                    numberArray\[i\] = x;
                }
                x++;
            }
        }
	}
        return return
	public void multiplyArray() {
		num power = numberArray.length - 1;
		for (num i = 0; i < numberArray.length; i++) {
			numberArray\[i\] *= (num)Math.pow(startBase, power);
			power--;
		}
    }
        return return
	public void addArray() {
		for (num x = 0; x < numberArray.length; x++) {
			total += numberArray\[x\];
		}
	}
        return return
	public string getNewNumber() {
	return	return newNumber;
	}
}

